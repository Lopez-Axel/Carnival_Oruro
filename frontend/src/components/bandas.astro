---
// SetsCarousel.astro
export interface SetItem {
  id: string;
  title: string;
  artist: string;
  event: string;
  date: string;
  image: string;
  videoUrl?: string;
  duration?: string;
  category?: 'mainstage' | 'core' | 'scenario' | 'special';
  featured?: boolean;
}

export interface Props {
  title?: string;
  subtitle?: string;
  sets: SetItem[];
  showDownloadApp?: boolean;
}

const { 
  title = "Revive los sets de invierno de Tomorrowland",
  subtitle = "Encuentra más conjuntos en la aplicación Tomorrowland.",
  sets = [],
  showDownloadApp = true
} = Astro.props;
---

<section class="sets-carousel-section">
  <div class="sets-container">
    <!-- Header -->
    <div class="sets-header">
      <div class="header-content">
        <h2 class="sets-title">{title}</h2>
        <p class="sets-subtitle">{subtitle}</p>
      </div>
      
      <div class="header-controls">
        <div class="carousel-nav">
          <button class="nav-btn prev-btn" id="prevBtn" aria-label="Previous">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <polyline points="15,18 9,12 15,6"></polyline>
            </svg>
          </button>
          <button class="nav-btn next-btn" id="nextBtn" aria-label="Next">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <polyline points="9,18 15,12 9,6"></polyline>
            </svg>
          </button>
        </div>
        
        {showDownloadApp && (
          <button class="download-app-btn">
            <span>DESCARGAR APLICACIÓN</span>
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <line x1="7" y1="17" x2="17" y2="7"></line>
              <polyline points="7,7 17,7 17,17"></polyline>
            </svg>
          </button>
        )}
      </div>
    </div>

    <!-- Carousel -->
    <div class="carousel-wrapper">
      <div class="sets-carousel" id="setsCarousel">
        {sets.map((set, index) => (
          <div 
            class={`set-card ${set.featured ? 'featured' : ''}`}
            data-category={set.category}
            style={`animation-delay: ${index * 0.1}s`}
          >
            <div class="card-media">
              <img src={set.image} alt={`${set.artist} - ${set.event}`} loading="lazy" />
              <div class="media-overlay"></div>
              
              <!-- Play Button -->
              <button class="play-btn" aria-label={`Play ${set.artist} set`}>
                <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
                  <polygon points="5,3 19,12 5,21"></polygon>
                </svg>
              </button>
              
              <!-- Duration Badge -->
              {set.duration && (
                <div class="duration-badge">
                  {set.duration}
                </div>
              )}
              
              <!-- Category Badge -->
              {set.category && (
                <div class={`category-badge ${set.category}`}>
                  {set.category === 'mainstage' && 'MainStage'}
                  {set.category === 'core' && 'CORE'}
                  {set.category === 'scenario' && 'Escenario'}
                  {set.category === 'special' && 'Special'}
                </div>
              )}
            </div>
            
            <div class="card-info">
              <h3 class="artist-name">{set.artist}</h3>
              <p class="set-details">
                <span class="event-name">{set.event}</span>
                <span class="set-date">{set.date}</span>
              </p>
            </div>
            
            {set.featured && (
              <div class="featured-indicator">
                <div class="pulse-ring"></div>
                <div class="pulse-dot"></div>
              </div>
            )}
          </div>
        ))}
      </div>
    </div>
    
    <!-- Progress Indicators -->
    <div class="progress-indicators" id="progressIndicators">
      {sets.map((_, index) => (
        <button 
          class={`progress-dot ${index === 0 ? 'active' : ''}`}
          data-index={index}
          aria-label={`Go to set ${index + 1}`}
        ></button>
      ))}
    </div>
  </div>
</section>

<style>
  .sets-carousel-section {
    width: 100%;
    background: linear-gradient(135deg, #1a1a2e 0%, #16213e 50%, #0f1419 100%);
    color: white;
    padding: 3rem 1rem;
    overflow: hidden;
    position: relative;
  }

  .sets-carousel-section::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: radial-gradient(circle at 30% 40%, rgba(99, 102, 241, 0.1) 0%, transparent 50%);
  }

  .sets-container {
    max-width: 1400px;
    margin: 0 auto;
    position: relative;
    z-index: 2;
  }

  .sets-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-end;
    margin-bottom: 3rem;
    gap: 2rem;
  }

  .header-content {
    flex: 1;
  }

  .sets-title {
    font-size: 2.75rem;
    font-weight: 800;
    margin: 0 0 0.75rem 0;
    line-height: 1.1;
    background: linear-gradient(45deg, #ffffff, #e2e8f0);
    background-clip: text;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }

  .sets-subtitle {
    font-size: 1rem;
    color: rgba(255, 255, 255, 0.7);
    margin: 0;
    font-weight: 300;
  }

  .header-controls {
    display: flex;
    align-items: center;
    gap: 1.5rem;
  }

  .carousel-nav {
    display: flex;
    gap: 0.5rem;
  }

  .nav-btn {
    width: 48px;
    height: 48px;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
    backdrop-filter: blur(10px);
  }

  .nav-btn:hover {
    background: rgba(255, 255, 255, 0.2);
    transform: scale(1.05);
  }

  .nav-btn:disabled {
    opacity: 0.4;
    cursor: not-allowed;
    transform: none;
  }

  .download-app-btn {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.5rem;
    background: linear-gradient(45deg, #3b82f6, #1d4ed8);
    border: none;
    border-radius: 25px;
    color: white;
    font-size: 0.85rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 4px 15px rgba(59, 130, 246, 0.3);
  }

  .download-app-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(59, 130, 246, 0.4);
  }

  .carousel-wrapper {
    overflow: hidden;
    margin-bottom: 2rem;
  }

  .sets-carousel {
    display: flex;
    gap: 1.5rem;
    transition: transform 0.5s cubic-bezier(0.4, 0, 0.2, 1);
    will-change: transform;
  }

  .set-card {
    flex: 0 0 320px;
    background: rgba(255, 255, 255, 0.05);
    border-radius: 20px;
    overflow: hidden;
    border: 1px solid rgba(255, 255, 255, 0.1);
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    backdrop-filter: blur(20px);
    position: relative;
    opacity: 0;
    transform: translateY(20px);
    animation: slideInUp 0.6s ease forwards;
  }

  .set-card:hover {
    transform: translateY(-10px) scale(1.03);
    border-color: rgba(255, 255, 255, 0.3);
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.4);
  }

  .set-card.featured {
    border: 2px solid rgba(59, 130, 246, 0.6);
    box-shadow: 0 0 30px rgba(59, 130, 246, 0.2);
  }

  .card-media {
    position: relative;
    height: 200px;
    overflow: hidden;
  }

  .card-media img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.6s ease;
  }

  .set-card:hover .card-media img {
    transform: scale(1.1);
  }

  .media-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(
      180deg,
      rgba(0, 0, 0, 0.1) 0%,
      rgba(0, 0, 0, 0.6) 100%
    );
  }

  .play-btn {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 60px;
    height: 60px;
    background: rgba(255, 255, 255, 0.95);
    border: none;
    border-radius: 50%;
    color: #1a1a2e;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
    backdrop-filter: blur(10px);
    opacity: 0.9;
  }

  .play-btn:hover {
    transform: translate(-50%, -50%) scale(1.1);
    background: white;
    opacity: 1;
  }

  .play-btn svg {
    margin-left: 2px;
  }

  .duration-badge {
    position: absolute;
    bottom: 0.75rem;
    right: 0.75rem;
    padding: 0.25rem 0.6rem;
    background: rgba(0, 0, 0, 0.8);
    border-radius: 12px;
    font-size: 0.75rem;
    font-weight: 500;
    backdrop-filter: blur(10px);
  }

  .category-badge {
    position: absolute;
    top: 0.75rem;
    left: 0.75rem;
    padding: 0.25rem 0.75rem;
    border-radius: 15px;
    font-size: 0.7rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .category-badge.mainstage {
    background: rgba(239, 68, 68, 0.9);
    color: white;
  }

  .category-badge.core {
    background: rgba(16, 185, 129, 0.9);
    color: white;
  }

  .category-badge.scenario {
    background: rgba(245, 158, 11, 0.9);
    color: white;
  }

  .category-badge.special {
    background: rgba(147, 51, 234, 0.9);
    color: white;
  }

  .card-info {
    padding: 1.25rem;
  }

  .artist-name {
    font-size: 1.2rem;
    font-weight: 700;
    margin: 0 0 0.5rem 0;
    line-height: 1.3;
  }

  .set-details {
    margin: 0;
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
  }

  .event-name {
    font-size: 0.9rem;
    color: rgba(255, 255, 255, 0.8);
  }

  .set-date {
    font-size: 0.8rem;
    color: rgba(255, 255, 255, 0.6);
  }

  .featured-indicator {
    position: absolute;
    top: 0.75rem;
    right: 0.75rem;
  }

  .pulse-ring {
    position: absolute;
    width: 20px;
    height: 20px;
    border: 2px solid rgba(59, 130, 246, 0.8);
    border-radius: 50%;
    animation: pulse-ring 1.5s cubic-bezier(0.215, 0.61, 0.355, 1) infinite;
  }

  .pulse-dot {
    width: 8px;
    height: 8px;
    background: #3b82f6;
    border-radius: 50%;
    position: absolute;
    top: 6px;
    left: 6px;
  }

  .progress-indicators {
    display: flex;
    justify-content: center;
    gap: 0.5rem;
    margin-top: 2rem;
  }

  .progress-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.3);
    border: none;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .progress-dot.active {
    background: white;
    transform: scale(1.2);
  }

  /* Responsive */
  @media (max-width: 768px) {
    .sets-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 1.5rem;
    }

    .sets-title {
      font-size: 2rem;
    }

    .header-controls {
      align-self: stretch;
      justify-content: space-between;
    }

    .set-card {
      flex: 0 0 280px;
    }

    .sets-carousel {
      padding-left: 1rem;
    }
  }

  /* Animations */
  @keyframes slideInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes pulse-ring {
    0% {
      transform: scale(0.8);
      opacity: 1;
    }
    100% {
      transform: scale(1.2);
      opacity: 0;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const carousel = document.getElementById('setsCarousel');
    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');
    const progressDots = document.querySelectorAll('.progress-dot');
    
    if (!carousel || !prevBtn || !nextBtn) return;
    
    let currentIndex = 0;
    const cards = carousel.children;
    const cardWidth = 320 + 24; // card width + gap
    const visibleCards = Math.floor(carousel.parentElement.offsetWidth / cardWidth);
    const maxIndex = Math.max(0, cards.length - visibleCards);
    
    function updateCarousel() {
      const translateX = -currentIndex * cardWidth;
      carousel.style.transform = `translateX(${translateX}px)`;
      
      // Update button states
      prevBtn.disabled = currentIndex === 0;
      nextBtn.disabled = currentIndex >= maxIndex;
      
      // Update progress dots
      progressDots.forEach((dot, index) => {
        dot.classList.toggle('active', 
          index >= currentIndex && index < currentIndex + visibleCards
        );
      });
    }
    
    prevBtn.addEventListener('click', () => {
      if (currentIndex > 0) {
        currentIndex--;
        updateCarousel();
      }
    });
    
    nextBtn.addEventListener('click', () => {
      if (currentIndex < maxIndex) {
        currentIndex++;
        updateCarousel();
      }
    });
    
    // Progress dots navigation
    progressDots.forEach((dot, index) => {
      dot.addEventListener('click', () => {
        currentIndex = Math.min(index, maxIndex);
        updateCarousel();
      });
    });
    
    // Auto-scroll functionality
    let autoScrollInterval;
    
    function startAutoScroll() {
      autoScrollInterval = setInterval(() => {
        if (currentIndex >= maxIndex) {
          currentIndex = 0;
        } else {
          currentIndex++;
        }
        updateCarousel();
      }, 5000);
    }
    
    function stopAutoScroll() {
      clearInterval(autoScrollInterval);
    }
    
    // Start auto-scroll
    startAutoScroll();
    
    // Pause on hover
    carousel.addEventListener('mouseenter', stopAutoScroll);
    carousel.addEventListener('mouseleave', startAutoScroll);
    
    // Play button functionality
    const playButtons = document.querySelectorAll('.play-btn');
    playButtons.forEach(btn => {
      btn.addEventListener('click', (e) => {
        e.stopPropagation();
        // Aquí podrías implementar la lógica para reproducir el video/set
        console.log('Playing set...');
        
        // Animate button
        btn.style.transform = 'translate(-50%, -50%) scale(0.9)';
        setTimeout(() => {
          btn.style.transform = 'translate(-50%, -50%) scale(1.1)';
        }, 150);
      });
    });
    
    // Initialize
    updateCarousel();
    
    // Responsive handling
    window.addEventListener('resize', () => {
      const newVisibleCards = Math.floor(carousel.parentElement.offsetWidth / cardWidth);
      const newMaxIndex = Math.max(0, cards.length - newVisibleCards);
      
      if (currentIndex > newMaxIndex) {
        currentIndex = newMaxIndex;
      }
      
      updateCarousel();
    });
    
    // Touch/swipe support for mobile
    let startX = 0;
    let isDragging = false;
    
    carousel.addEventListener('touchstart', (e) => {
      startX = e.touches[0].clientX;
      isDragging = true;
      stopAutoScroll();
    });
    
    carousel.addEventListener('touchmove', (e) => {
      if (!isDragging) return;
      e.preventDefault();
    });
    
    carousel.addEventListener('touchend', (e) => {
      if (!isDragging) return;
      isDragging = false;
      
      const endX = e.changedTouches[0].clientX;
      const diff = startX - endX;
      
      if (Math.abs(diff) > 50) {
        if (diff > 0 && currentIndex < maxIndex) {
          currentIndex++;
        } else if (diff < 0 && currentIndex > 0) {
          currentIndex--;
        }
        updateCarousel();
      }
      
      startAutoScroll();
    });
  });
</script>

