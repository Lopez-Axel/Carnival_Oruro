---
// EventsCarousel.astro
export interface Event {
  id: string;
  title: string;
  subtitle?: string;
  date: string;
  location: string;
  image: string;
  category: string;
  href?: string;
}

export interface Props {
  title?: string;
  events: Event[];
}

const { 
  title = "Upcoming Festivals & Events",
  events = []
} = Astro.props;
---

<section class="events-carousel">
  <div class="carousel-header">
    <h2 class="carousel-title">{title}</h2>
    <div class="carousel-controls">
      <button class="control-btn prev-btn" aria-label="Previous">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <polyline points="15,18 9,12 15,6"></polyline>
        </svg>
      </button>
      <button class="control-btn next-btn" aria-label="Next">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <polyline points="9,18 15,12 9,6"></polyline>
        </svg>
      </button>
      <div class="calendar-btn">
        <span>Calendar</span>
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
          <line x1="16" y1="2" x2="16" y2="6"></line>
          <line x1="8" y1="2" x2="8" y2="6"></line>
          <line x1="3" y1="10" x2="21" y2="10"></line>
        </svg>
      </div>
    </div>
  </div>

  <div class="carousel-container">
    <div class="carousel-track" id="eventsTrack">
      {events.map((event, index) => (
        <div class="event-card" data-category={event.category}>
          <div class="card-image">
            <img src={event.image} alt={event.title} loading="lazy" />
            <div class="card-overlay"></div>
          </div>
          <div class="card-content">
            <div class="card-header">
              <h3 class="event-title">{event.title}</h3>
              {event.subtitle && <p class="event-subtitle">{event.subtitle}</p>}
            </div>
            <div class="event-details">
              <div class="detail-item">
                <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                  <line x1="16" y1="2" x2="16" y2="6"></line>
                  <line x1="8" y1="2" x2="8" y2="6"></line>
                  <line x1="3" y1="10" x2="21" y2="10"></line>
                </svg>
                <span>{event.date}</span>
              </div>
              <div class="detail-item">
                <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path>
                  <circle cx="12" cy="10" r="3"></circle>
                </svg>
                <span>{event.location}</span>
              </div>
            </div>
            <div class="card-actions">
              <button class="action-btn secondary">INFO</button>
              <button class="action-btn primary">TICKETS</button>
            </div>
          </div>
        </div>
      ))}
    </div>
  </div>
</section>

<style>
  .events-carousel {
    width: 100%;
    padding: 2rem 1rem;
    background: linear-gradient(135deg, #0f1419 0%, #1a2332 100%);
    color: white;
    overflow: hidden;
  }

  .carousel-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
    max-width: 1200px;
    margin-left: auto;
    margin-right: auto;
  }

  .carousel-title {
    font-size: 1.75rem;
    font-weight: 700;
    margin: 0;
    background: linear-gradient(45deg, #ffffff, #a0aec0);
    background-clip: text;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }

  .carousel-controls {
    display: flex;
    align-items: center;
    gap: 0.75rem;
  }

  .control-btn {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
    backdrop-filter: blur(10px);
  }

  .control-btn:hover {
    background: rgba(255, 255, 255, 0.2);
    transform: scale(1.05);
  }

  .calendar-btn {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    background: rgba(99, 102, 241, 0.2);
    border: 1px solid rgba(99, 102, 241, 0.3);
    border-radius: 20px;
    color: #a5b4fc;
    font-size: 0.875rem;
    cursor: pointer;
    transition: all 0.3s ease;
    backdrop-filter: blur(10px);
  }

  .calendar-btn:hover {
    background: rgba(99, 102, 241, 0.3);
    transform: translateY(-1px);
  }

  .carousel-container {
    max-width: 1200px;
    margin: 0 auto;
    overflow: hidden;
  }

  .carousel-track {
    display: flex;
    gap: 1.5rem;
    transition: transform 0.5s cubic-bezier(0.4, 0, 0.2, 1);
    will-change: transform;
  }

  .event-card {
    flex: 0 0 280px;
    background: rgba(255, 255, 255, 0.05);
    border-radius: 16px;
    overflow: hidden;
    border: 1px solid rgba(255, 255, 255, 0.1);
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    backdrop-filter: blur(20px);
    position: relative;
  }

  .event-card:hover {
    transform: translateY(-8px) scale(1.02);
    border-color: rgba(255, 255, 255, 0.3);
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
  }

  .card-image {
    position: relative;
    height: 180px;
    overflow: hidden;
  }

  .card-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.6s ease;
  }

  .event-card:hover .card-image img {
    transform: scale(1.1);
  }

  .card-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(
      180deg,
      rgba(0, 0, 0, 0) 0%,
      rgba(0, 0, 0, 0.7) 100%
    );
  }

  .card-content {
    padding: 1.25rem;
  }

  .card-header {
    margin-bottom: 1rem;
  }

  .event-title {
    font-size: 1.1rem;
    font-weight: 700;
    margin: 0 0 0.25rem 0;
    line-height: 1.3;
  }

  .event-subtitle {
    font-size: 0.875rem;
    color: rgba(255, 255, 255, 0.7);
    margin: 0;
  }

  .event-details {
    margin-bottom: 1.25rem;
  }

  .detail-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-bottom: 0.5rem;
    font-size: 0.8rem;
    color: rgba(255, 255, 255, 0.8);
  }

  .detail-item svg {
    opacity: 0.7;
  }

  .card-actions {
    display: flex;
    gap: 0.75rem;
  }

  .action-btn {
    flex: 1;
    padding: 0.625rem 1rem;
    border-radius: 8px;
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    cursor: pointer;
    transition: all 0.3s ease;
    border: none;
  }

  .action-btn.secondary {
    background: rgba(255, 255, 255, 0.1);
    color: rgba(255, 255, 255, 0.9);
    border: 1px solid rgba(255, 255, 255, 0.2);
  }

  .action-btn.secondary:hover {
    background: rgba(255, 255, 255, 0.2);
    transform: translateY(-1px);
  }

  .action-btn.primary {
    background: linear-gradient(45deg, #6366f1, #8b5cf6);
    color: white;
    border: none;
  }

  .action-btn.primary:hover {
    transform: translateY(-1px);
    box-shadow: 0 8px 25px rgba(99, 102, 241, 0.4);
  }

  /* Responsive */
  @media (max-width: 768px) {
    .carousel-header {
      flex-direction: column;
      gap: 1rem;
      align-items: flex-start;
    }

    .carousel-title {
      font-size: 1.5rem;
    }

    .event-card {
      flex: 0 0 250px;
    }

    .carousel-track {
      padding-left: 1rem;
    }
  }

  /* Animaciones adicionales */
  @keyframes slideIn {
    from {
      opacity: 0;
      transform: translateX(30px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  .event-card {
    animation: slideIn 0.6s ease forwards;
  }

  .event-card:nth-child(1) { animation-delay: 0.1s; }
  .event-card:nth-child(2) { animation-delay: 0.2s; }
  .event-card:nth-child(3) { animation-delay: 0.3s; }
  .event-card:nth-child(4) { animation-delay: 0.4s; }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const track = document.getElementById('eventsTrack');
    const prevBtn = document.querySelector('.prev-btn');
    const nextBtn = document.querySelector('.next-btn');
    
    if (!track || !prevBtn || !nextBtn) return;
    
    let currentIndex = 0;
    const cards = track.children;
    const cardWidth = 280 + 24; // card width + gap
    const visibleCards = Math.floor(track.parentElement.offsetWidth / cardWidth);
    const maxIndex = Math.max(0, cards.length - visibleCards);
    
    function updateCarousel() {
      const translateX = -currentIndex * cardWidth;
      track.style.transform = `translateX(${translateX}px)`;
      
      // Update button states
      prevBtn.style.opacity = currentIndex === 0 ? '0.5' : '1';
      nextBtn.style.opacity = currentIndex >= maxIndex ? '0.5' : '1';
    }
    
    prevBtn.addEventListener('click', () => {
      if (currentIndex > 0) {
        currentIndex--;
        updateCarousel();
      }
    });
    
    nextBtn.addEventListener('click', () => {
      if (currentIndex < maxIndex) {
        currentIndex++;
        updateCarousel();
      }
    });
    
    // Auto-scroll functionality
    let autoScrollInterval;
    
    function startAutoScroll() {
      autoScrollInterval = setInterval(() => {
        if (currentIndex >= maxIndex) {
          currentIndex = 0;
        } else {
          currentIndex++;
        }
        updateCarousel();
      }, 4000);
    }
    
    function stopAutoScroll() {
      clearInterval(autoScrollInterval);
    }
    
    // Start auto-scroll
    startAutoScroll();
    
    // Pause on hover
    track.addEventListener('mouseenter', stopAutoScroll);
    track.addEventListener('mouseleave', startAutoScroll);
    
    // Initialize
    updateCarousel();
    
    // Responsive handling
    window.addEventListener('resize', () => {
      const newVisibleCards = Math.floor(track.parentElement.offsetWidth / cardWidth);
      const newMaxIndex = Math.max(0, cards.length - newVisibleCards);
      
      if (currentIndex > newMaxIndex) {
        currentIndex = newMaxIndex;
      }
      
      updateCarousel();
    });
  });
</script>
