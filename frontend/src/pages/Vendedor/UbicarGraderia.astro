---
// src/pages/mapa.astro
---

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mapa Interactivo</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background: linear-gradient(135deg, #1a237e 0%, #283593 50%, #3f51b5 100%);
            min-height: 100vh;
            color: #ffffff;
        }

        .app-container {
            display: flex;
            height: 100vh;
            overflow: hidden;
        }

        /* Panel de controles lateral */
        .controls-panel {
            width: 320px;
            background: rgba(26, 35, 126, 0.95);
            backdrop-filter: blur(10px);
            border-right: 1px solid rgba(255, 255, 255, 0.1);
            padding: 20px;
            overflow-y: auto;
            box-shadow: 2px 0 20px rgba(0, 0, 0, 0.3);
        }

        .panel-header {
            text-align: center;
            margin-bottom: 30px;
        }

        .panel-title {
            font-size: 24px;
            font-weight: 700;
            background: linear-gradient(45deg, #64b5f6, #42a5f5);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            margin-bottom: 8px;
        }

        .panel-subtitle {
            color: rgba(255, 255, 255, 0.7);
            font-size: 14px;
        }

        /* Secciones del panel */
        .control-section {
            margin-bottom: 25px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 12px;
            padding: 20px;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .section-title {
            font-size: 16px;
            font-weight: 600;
            margin-bottom: 15px;
            color: #64b5f6;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .section-icon {
            width: 20px;
            height: 20px;
            background: linear-gradient(45deg, #1976d2, #42a5f5);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
        }

        /* Botones */
        .control-button {
            width: 100%;
            padding: 12px 16px;
            background: linear-gradient(135deg, #1976d2, #1565c0);
            border: none;
            border-radius: 8px;
            color: white;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-bottom: 10px;
            display: flex;
            align-items: center;
            gap: 10px;
            font-size: 14px;
        }

        .control-button:hover {
            background: linear-gradient(135deg, #1565c0, #0d47a1);
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(25, 118, 210, 0.4);
        }

        .control-button.active {
            background: linear-gradient(135deg, #d32f2f, #c62828);
        }

        .control-button.secondary {
            background: linear-gradient(135deg, #455a64, #37474f);
        }

        .control-button.secondary:hover {
            background: linear-gradient(135deg, #37474f, #263238);
        }

        /* Inputs y controles */
        .control-input {
            width: 100%;
            padding: 10px 12px;
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 6px;
            color: white;
            font-size: 14px;
            margin-bottom: 10px;
        }

        .control-input:focus {
            outline: none;
            border-color: #42a5f5;
            box-shadow: 0 0 0 2px rgba(66, 165, 245, 0.2);
        }

        .control-input::placeholder {
            color: rgba(255, 255, 255, 0.5);
        }

        .control-group {
            display: flex;
            gap: 10px;
            margin-bottom: 10px;
        }

        .control-select {
            width: 100%;
            padding: 10px 12px;
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 6px;
            color: white;
            font-size: 14px;
            margin-bottom: 10px;
        }

        /* √Årea del mapa */
        .map-container {
            flex: 1;
            position: relative;
            background: linear-gradient(45deg, #263238, #37474f);
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .map-placeholder {
            width: 90%;
            height: 85%;
            background: rgba(255, 255, 255, 0.05);
            border: 2px dashed rgba(255, 255, 255, 0.2);
            border-radius: 12px;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            position: relative;
            overflow: hidden;
        }

        .map-placeholder::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: 
                radial-gradient(circle at 20% 30%, rgba(66, 165, 245, 0.1) 0%, transparent 50%),
                radial-gradient(circle at 80% 70%, rgba(25, 118, 210, 0.1) 0%, transparent 50%);
        }

        .map-text {
            font-size: 18px;
            color: rgba(255, 255, 255, 0.7);
            text-align: center;
            z-index: 1;
        }

        .map-subtext {
            font-size: 14px;
            color: rgba(255, 255, 255, 0.5);
            margin-top: 8px;
            z-index: 1;
        }

        /* Controles flotantes sobre el mapa */
        .map-overlay-controls {
            position: absolute;
            top: 20px;
            right: 20px;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .overlay-button {
            width: 45px;
            height: 45px;
            background: rgba(26, 35, 126, 0.9);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 50%;
            color: white;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
            font-size: 18px;
        }

        .overlay-button:hover {
            background: rgba(25, 118, 210, 0.9);
            transform: scale(1.1);
        }

        /* Info panel flotante */
        .info-panel {
            position: absolute;
            bottom: 20px;
            left: 20px;
            right: 20px;
            background: rgba(26, 35, 126, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 12px;
            padding: 20px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            display: none;
        }

        .info-panel.active {
            display: block;
            animation: slideUp 0.3s ease;
        }

        @keyframes slideUp {
            from {
                transform: translateY(100%);
                opacity: 0;
            }
            to {
                transform: translateY(0);
                opacity: 1;
            }
        }

        /* Toggle para panel m√≥vil */
        .mobile-toggle {
            display: none;
            position: fixed;
            top: 20px;
            left: 20px;
            z-index: 1000;
            width: 45px;
            height: 45px;
            background: rgba(26, 35, 126, 0.9);
            border: none;
            border-radius: 50%;
            color: white;
            font-size: 18px;
            cursor: pointer;
        }

        /* Responsive */
        @media (max-width: 768px) {
            .mobile-toggle {
                display: flex;
                align-items: center;
                justify-content: center;
            }

            .controls-panel {
                position: fixed;
                left: -320px;
                top: 0;
                height: 100vh;
                z-index: 999;
                transition: left 0.3s ease;
            }

            .controls-panel.open {
                left: 0;
            }

            .map-container {
                width: 100%;
            }
        }

        /* Scrollbar personalizado */
        .controls-panel::-webkit-scrollbar {
            width: 6px;
        }

        .controls-panel::-webkit-scrollbar-track {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 3px;
        }

        .controls-panel::-webkit-scrollbar-thumb {
            background: rgba(255, 255, 255, 0.3);
            border-radius: 3px;
        }

        .controls-panel::-webkit-scrollbar-thumb:hover {
            background: rgba(255, 255, 255, 0.5);
        }
    </style>
</head>
<body>
    <div class="app-container">
        <!-- Bot√≥n toggle para m√≥vil -->
        <button class="mobile-toggle" onclick="togglePanel()">‚ò∞</button>

        <!-- Panel de controles -->
        <div class="controls-panel" id="controlsPanel">
            <div class="panel-header">
                <h1 class="panel-title">Mapa Interactivo</h1>
                <p class="panel-subtitle">Control de visualizaci√≥n y herramientas</p>
            </div>

            <!-- Secci√≥n de Vista del Mapa -->
            <div class="control-section">
                <h3 class="section-title">
                    <span class="section-icon">üó∫Ô∏è</span>
                    Vista del Mapa
                </h3>
                <button class="control-button" onclick="changeMapType('satellite')">
                    üõ∞Ô∏è Vista Sat√©lite
                </button>
                <button class="control-button" onclick="changeMapType('terrain')">
                    üèîÔ∏è Vista Terreno
                </button>
                <button class="control-button" onclick="changeMapType('roadmap')">
                    üõ£Ô∏è Vista Carreteras
                </button>
                <button class="control-button" onclick="changeMapType('hybrid')">
                    üîÑ Vista H√≠brida
                </button>
            </div>

            <!-- Secci√≥n de Marcadores -->
            <div class="control-section">
                <h3 class="section-title">
                    <span class="section-icon">üìç</span>
                    Marcadores
                </h3>
                <input type="text" class="control-input" placeholder="Nombre del marcador" id="markerName">
                <div class="control-group">
                    <input type="number" class="control-input" placeholder="Latitud" id="markerLat">
                    <input type="number" class="control-input" placeholder="Longitud" id="markerLng">
                </div>
                <select class="control-select" id="markerType">
                    <option value="default">Marcador por defecto</option>
                    <option value="restaurant">Restaurante</option>
                    <option value="hospital">Hospital</option>
                    <option value="school">Escuela</option>
                    <option value="park">Parque</option>
                </select>
                <button class="control-button" onclick="addMarker()">
                    ‚ûï Agregar Marcador
                </button>
                <button class="control-button secondary" onclick="clearMarkers()">
                    üóëÔ∏è Limpiar Marcadores
                </button>
            </div>

            <!-- Secci√≥n de Grader√≠a -->
            <div class="control-section">
                <h3 class="section-title">
                    <span class="section-icon">üìè</span>
                    Herramientas de Medici√≥n
                </h3>
                <button class="control-button" onclick="toggleDistanceMode()" id="distanceBtn">
                    üìê Medir Distancia
                </button>
                <button class="control-button" onclick="toggleAreaMode()" id="areaBtn">
                    üìä Medir √Årea
                </button>
                <button class="control-button" onclick="addGraduation()">
                    üìè Insertar Grader√≠a
                </button>
                <div class="control-group">
                    <input type="number" class="control-input" placeholder="Escala (km)" id="scaleInput" value="1">
                    <button class="control-button" onclick="updateScale()">
                        ‚öñÔ∏è Aplicar
                    </button>
                </div>
            </div>

            <!-- Secci√≥n de Rutas -->
            <div class="control-section">
                <h3 class="section-title">
                    <span class="section-icon">üõ§Ô∏è</span>
                    Rutas y Navegaci√≥n
                </h3>
                <input type="text" class="control-input" placeholder="Origen" id="routeOrigin">
                <input type="text" class="control-input" placeholder="Destino" id="routeDestination">
                <select class="control-select" id="routeMode">
                    <option value="driving">En coche</option>
                    <option value="walking">Caminando</option>
                    <option value="bicycling">En bicicleta</option>
                    <option value="transit">Transporte p√∫blico</option>
                </select>
                <button class="control-button" onclick="calculateRoute()">
                    üó∫Ô∏è Calcular Ruta
                </button>
                <button class="control-button secondary" onclick="clearRoute()">
                    ‚ùå Limpiar Ruta
                </button>
            </div>

            <!-- Secci√≥n de Capas -->
            <div class="control-section">
                <h3 class="section-title">
                    <span class="section-icon">üé≠</span>
                    Capas del Mapa
                </h3>
                <button class="control-button" onclick="toggleLayer('traffic')" id="trafficBtn">
                    üö¶ Tr√°fico
                </button>
                <button class="control-button" onclick="toggleLayer('transit')" id="transitBtn">
                    üöå Transporte
                </button>
                <button class="control-button" onclick="toggleLayer('bike')" id="bikeBtn">
                    üö¥ Ciclov√≠as
                </button>
            </div>

            <!-- Secci√≥n de Ubicaci√≥n -->
            <div class="control-section">
                <h3 class="section-title">
                    <span class="section-icon">üìç</span>
                    Ubicaci√≥n
                </h3>
                <button class="control-button" onclick="getCurrentLocation()">
                    üéØ Mi Ubicaci√≥n
                </button>
                <button class="control-button" onclick="searchLocation()">
                    üîç Buscar Lugar
                </button>
                <input type="text" class="control-input" placeholder="Buscar direcci√≥n..." id="searchInput">
            </div>
        </div>

        <!-- Contenedor del mapa -->
        <div class="map-container">
            <div class="map-placeholder" id="mapContainer">
                <div class="map-text">üó∫Ô∏è √Årea del Mapa</div>
                <div class="map-subtext">Aqu√≠ se integrar√° Google Maps</div>
            </div>

            <!-- Controles flotantes -->
            <div class="map-overlay-controls">
                <button class="overlay-button" onclick="zoomIn()" title="Acercar">+</button>
                <button class="overlay-button" onclick="zoomOut()" title="Alejar">‚àí</button>
                <button class="overlay-button" onclick="resetView()" title="Centrar">üéØ</button>
                <button class="overlay-button" onclick="toggleFullscreen()" title="Pantalla completa">‚õ∂</button>
            </div>

            <!-- Panel de informaci√≥n flotante -->
            <div class="info-panel" id="infoPanel">
                <h4>Informaci√≥n del Punto</h4>
                <p id="infoContent">Selecciona un punto en el mapa para ver detalles</p>
            </div>
        </div>
    </div>

    <script>
        // Variables globales para el estado de la aplicaci√≥n
        let mapInstance = null;
        let isDistanceMode = false;
        let isAreaMode = false;
        let currentMarkers = [];
        let activeLayers = new Set();

        // Toggle del panel m√≥vil
        function togglePanel() {
            const panel = document.getElementById('controlsPanel');
            panel.classList.toggle('open');
        }

        // Funciones de vista del mapa
        function changeMapType(type) {
            console.log(`Cambiando tipo de mapa a: ${type}`);
            // Aqu√≠ integrar√°s con Google Maps API
            showNotification(`Vista cambiada a: ${type}`);
        }

        // Funciones de marcadores
        function addMarker() {
            const name = document.getElementById('markerName').value;
            const lat = document.getElementById('markerLat').value;
            const lng = document.getElementById('markerLng').value;
            const type = document.getElementById('markerType').value;

            if (!name || !lat || !lng) {
                showNotification('Por favor completa todos los campos del marcador', 'error');
                return;
            }

            console.log(`Agregando marcador: ${name} en (${lat}, ${lng}) tipo: ${type}`);
            currentMarkers.push({ name, lat, lng, type });
            showNotification(`Marcador "${name}" agregado correctamente`);
            
            // Limpiar campos
            document.getElementById('markerName').value = '';
            document.getElementById('markerLat').value = '';
            document.getElementById('markerLng').value = '';
        }

        function clearMarkers() {
            currentMarkers = [];
            console.log('Marcadores eliminados');
            showNotification('Todos los marcadores han sido eliminados');
        }

        // Funciones de medici√≥n y grader√≠a
        function toggleDistanceMode() {
            isDistanceMode = !isDistanceMode;
            const btn = document.getElementById('distanceBtn');
            
            if (isDistanceMode) {
                btn.classList.add('active');
                btn.textContent = 'üìê Cancelar Medici√≥n';
                isAreaMode = false;
                document.getElementById('areaBtn').classList.remove('active');
                document.getElementById('areaBtn').textContent = 'üìä Medir √Årea';
            } else {
                btn.classList.remove('active');
                btn.textContent = 'üìê Medir Distancia';
            }
            
            console.log(`Modo medici√≥n de distancia: ${isDistanceMode}`);
            showNotification(isDistanceMode ? 'Modo medici√≥n activado' : 'Modo medici√≥n desactivado');
        }

        function toggleAreaMode() {
            isAreaMode = !isAreaMode;
            const btn = document.getElementById('areaBtn');
            
            if (isAreaMode) {
                btn.classList.add('active');
                btn.textContent = 'üìä Cancelar √Årea';
                isDistanceMode = false;
                document.getElementById('distanceBtn').classList.remove('active');
                document.getElementById('distanceBtn').textContent = 'üìê Medir Distancia';
            } else {
                btn.classList.remove('active');
                btn.textContent = 'üìä Medir √Årea';
            }
            
            console.log(`Modo medici√≥n de √°rea: ${isAreaMode}`);
            showNotification(isAreaMode ? 'Modo √°rea activado' : 'Modo √°rea desactivado');
        }

        function addGraduation() {
            console.log('Insertando grader√≠a en el mapa');
            showNotification('Grader√≠a insertada en el mapa');
        }

        function updateScale() {
            const scale = document.getElementById('scaleInput').value;
            console.log(`Actualizando escala a: ${scale} km`);
            showNotification(`Escala actualizada a ${scale} km`);
        }

        // Funciones de rutas
        function calculateRoute() {
            const origin = document.getElementById('routeOrigin').value;
            const destination = document.getElementById('routeDestination').value;
            const mode = document.getElementById('routeMode').value;

            if (!origin || !destination) {
                showNotification('Por favor ingresa origen y destino', 'error');
                return;
            }

            console.log(`Calculando ruta de ${origin} a ${destination} en modo ${mode}`);
            showNotification(`Calculando ruta: ${origin} ‚Üí ${destination}`);
        }

        function clearRoute() {
            document.getElementById('routeOrigin').value = '';
            document.getElementById('routeDestination').value = '';
            console.log('Ruta eliminada');
            showNotification('Ruta eliminada del mapa');
        }

        // Funciones de capas
        function toggleLayer(layerType) {
            const btn = document.getElementById(`${layerType}Btn`);
            
            if (activeLayers.has(layerType)) {
                activeLayers.delete(layerType);
                btn.classList.remove('active');
                showNotification(`Capa ${layerType} desactivada`);
            } else {
                activeLayers.add(layerType);
                btn.classList.add('active');
                showNotification(`Capa ${layerType} activada`);
            }
            
            console.log(`Toggle capa ${layerType}:`, activeLayers.has(layerType));
        }

        // Funciones de ubicaci√≥n
        function getCurrentLocation() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(
                    (position) => {
                        const lat = position.coords.latitude;
                        const lng = position.coords.longitude;
                        console.log(`Ubicaci√≥n actual: ${lat}, ${lng}`);
                        showNotification(`Ubicaci√≥n obtenida: ${lat.toFixed(4)}, ${lng.toFixed(4)}`);
                    },
                    (error) => {
                        showNotification('Error al obtener ubicaci√≥n', 'error');
                    }
                );
            } else {
                showNotification('Geolocalizaci√≥n no soportada', 'error');
            }
        }

        function searchLocation() {
            const query = document.getElementById('searchInput').value;
            if (!query) {
                showNotification('Por favor ingresa una direcci√≥n', 'error');
                return;
            }
            
            console.log(`Buscando: ${query}`);
            showNotification(`Buscando: ${query}`);
        }

        // Controles del mapa
        function zoomIn() {
            console.log('Zoom in');
            showNotification('Acercando vista');
        }

        function zoomOut() {
            console.log('Zoom out');
            showNotification('Alejando vista');
        }

        function resetView() {
            console.log('Reset view');
            showNotification('Vista restablecida');
        }

        function toggleFullscreen() {
            if (!document.fullscreenElement) {
                document.documentElement.requestFullscreen();
                showNotification('Pantalla completa activada');
            } else {
                document.exitFullscreen();
                showNotification('Pantalla completa desactivada');
            }
        }

        // Sistema de notificaciones
        function showNotification(message, type = 'success') {
            // Crear elemento de notificaci√≥n
            const notification = document.createElement('div');
            notification.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                background: ${type === 'error' ? 'linear-gradient(135deg, #d32f2f, #c62828)' : 'linear-gradient(135deg, #1976d2, #1565c0)'};
                color: white;
                padding: 12px 20px;
                border-radius: 8px;
                font-size: 14px;
                font-weight: 500;
                box-shadow: 0 4px 12px rgba(0,0,0,0.3);
                z-index: 10000;
                animation: slideInRight 0.3s ease;
                max-width: 300px;
            `;
            
            notification.textContent = message;
            document.body.appendChild(notification);

            // Remover despu√©s de 3 segundos
            setTimeout(() => {
                notification.style.animation = 'slideOutRight 0.3s ease forwards';
                setTimeout(() => {
                    document.body.removeChild(notification);
                }, 300);
            }, 3000);
        }

        // Agregar estilos de animaci√≥n para las notificaciones
        const style = document.createElement('style');
        style.textContent = `
            @keyframes slideInRight {
                from {
                    transform: translateX(100%);
                    opacity: 0;
                }
                to {
                    transform: translateX(0);
                    opacity: 1;
                }
            }
            
            @keyframes slideOutRight {
                from {
                    transform: translateX(0);
                    opacity: 1;
                }
                to {
                    transform: translateX(100%);
                    opacity: 0;
                }
            }
        `;
        document.head.appendChild(style);

        // Event listeners adicionales
        document.addEventListener('DOMContentLoaded', function() {
            // B√∫squeda con Enter
            document.getElementById('searchInput').addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    searchLocation();
                }
            });

            // Cerrar panel al hacer click fuera en m√≥vil
            document.addEventListener('click', function(e) {
                const panel = document.getElementById('controlsPanel');
                const toggle = document.querySelector('.mobile-toggle');
                
                if (window.innerWidth <= 768 && 
                    !panel.contains(e.target) && 
                    !toggle.contains(e.target) && 
                    panel.classList.contains('open')) {
                    panel.classList.remove('open');
                }
            });

            console.log('Interfaz de mapa inicializada correctamente');
            showNotification('Interfaz de mapa lista para usar');
        });
    </script>
</body>
</html>